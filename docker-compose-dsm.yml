version: '2'

services:

  # a DB server; the underlying DB for NextCloud
  postgres:
    image: postgres:13
    container_name: postgres
    restart: unless-stopped
    ports:
      - 54321:5432
    volumes:
      - ${DATA_VOLUME_BASE_PATH}/postgres/13/data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}

  # a key value store; acts as cache for NextCloud
  redis:
    image: redis:6
    container_name: redis
    command: redis-server --requirepass somedummypass # this is not exposed and used only in this internal network. It is required because of nextcloud
    restart: unless-stopped
    logging:
      driver: "none"

  # maintenance processes that must be run regularly in order for Nextcloud to run properly
  # same image used for the actual nextcloud service below
  nextcloud-cron:
    image: nextcloud:21.0.2-fpm-alpine
    container_name: nextcloud-cron
    restart: unless-stopped
    volumes:
      - ${DATA_VOLUME_BASE_PATH}/nextcloud:/var/www/html
      - /etc/localtime:/etc/localtime:ro
    entrypoint: /cron.sh
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_DB=nextcloud
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - REDIS_HOST=redis
      - REDIS_HOST_PASSWORD=somedummypass
    depends_on:
      - postgres
      - redis
    logging:
      driver: "none"

  # a Dropbox alternative, self-hosted
  nextcloud:
    image: nextcloud:21.0.2-fpm-alpine
    container_name: nextcloud
    restart: unless-stopped
    volumes:
      - ${DATA_VOLUME_BASE_PATH}/nextcloud:/var/www/html
      - /etc/localtime:/etc/localtime:ro
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_DB=nextcloud
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - REDIS_HOST=redis
      - REDIS_HOST_PASSWORD=somedummypass
    depends_on:
      - postgres
      - redis
      - nextcloud-cron
      - nginx-nextcloud-fpm-front
    logging:
      driver: "none"

  # the actual php server for NextCloud
  nginx-nextcloud-fpm-front:
    build: ./nginx-nextcloud-fpm-front-x86
    container_name: nginx-nextcloud-fpm-front
    restart: unless-stopped
    volumes:
      - ${DATA_VOLUME_BASE_PATH}/nextcloud:/var/www/html:ro
    expose:
      - 80
    labels:
      - traefik.enable=true
      - traefik.http.routers.nextcloud.rule=Host(`${NEXTCLOUD_HOST}`)
      - traefik.http.routers.nextcloud.entrypoints=websecure
      - traefik.http.routers.nextcloud.tls.certresolver=myresolver
      # Middlewares
      ## Proxy
      ## https://github.com/azonictechnophile/nextcloud_on_docker/blob/4255c29e58f485ae1bad7f0ade61bb99b09e8c21/roles/docker_container/tasks/nginx.yml#L46
      - traefik.http.middlewares.nextcloud.headers.referrerPolicy=no-referrer
      - traefik.http.middlewares.nextcloud.headers.SSLRedirect=true
      #- traefik.http.middlewares.nextcloud.headers.STSSeconds=15552001
      #- traefik.http.middlewares.nextcloud.headers.STSSeconds=315360000
      - traefik.http.middlewares.nextcloud.headers.browserXSSFilter=true
      - traefik.http.middlewares.nextcloud.headers.contentTypeNosniff=true
      #- traefik.http.middlewares.nextcloud.headers.forceSTSHeader=true
      #- traefik.http.middlewares.nextcloud.headers.STSIncludeSubdomains=true
      #- traefik.http.middlewares.nextcloud.headers.STSPreload=true
      - traefik.http.middlewares.nextcloud.headers.customFrameOptionsValue=SAMEORIGIN
      #- traefik.http.middlewares.nextcloud.headers.customRequestHeaders.X-Forwarded-Proto=https
      ## CalDAV/CardDAV
      ## https://docs.nextcloud.com/server/15/admin_manual/configuration_server/reverse_proxy_configuration.html#traefik
      - traefik.http.middlewares.nextcloud-dav.redirectRegex.permanent=true
      - traefik.http.middlewares.nextcloud-dav.redirectRegex.regex="https://(.*)/.well-known/(card|cal)dav"
      - traefik.http.middlewares.nextcloud-dav.redirectRegex.replacement="https://$${1}/remote.php/dav/"
    logging:
      driver: "none"

  # torrent client
  transmission:
    image: linuxserver/transmission:latest
    container_name: transmission
    restart: unless-stopped
    environment:
      - TZ=Europe/London
      - PUID=0
      - PGID=0
      - USER=${TRANSMISSION_USER}
      - PASS=${TRANSMISSION_PASSWORD}
    volumes:
      - ${DATA_VOLUME_BASE_PATH}/media_services/MEDIA:/MEDIA
      - ${DATA_VOLUME_BASE_PATH}/media_services/transmission/config:/config
    ports:
      - 51413:51413
      - 51413:51413/udp
    expose:
      - 9091
    labels:
      - traefik.enable=true
      - traefik.http.routers.transmission.rule=Host(`${TRANSMISSION_HOST}`)
      - traefik.http.routers.transmission.entrypoints=websecure
      - traefik.http.routers.transmission.tls.certresolver=myresolver
    dns:
      - 1.1.1.1
      - 8.8.8.8
      - 8.8.4.4

  # tracker sites proxy for the other two below
  jackett:
    image: linuxserver/jackett:latest
    container_name: jackett
    restart: unless-stopped
    volumes:
      - ${DATA_VOLUME_BASE_PATH}/media_services/jackett/config:/config
    expose:
      - 9117
    labels:
      - traefik.enable=true
      - traefik.http.routers.jackett.rule=Host(`${JACKETT_HOST}`)
      - traefik.http.routers.jackett.entrypoints=websecure
      - traefik.http.routers.jackett.tls.certresolver=myresolver
    depends_on:
      - flaresolverr
    dns:
      - 1.1.1.1
      - 8.8.8.8
      - 8.8.4.4

  flaresolverr:
    # DockerHub mirror flaresolverr/flaresolverr:latest
    image: ghcr.io/flaresolverr/flaresolverr:latest
    container_name: flaresolverr
    restart: unless-stopped
    environment:
      - CAPTCHA_SOLVER=none
    dns:
      - 1.1.1.1
      - 8.8.8.8
      - 8.8.4.4

  # to look for TV series
  sonarr:
    image: linuxserver/sonarr:latest
    container_name: sonarr
    restart: unless-stopped
    environment:
      - TZ=Europe/London
      - PUID=0
      - PGID=0
    depends_on:
      - jackett
      - transmission
    volumes:
      - ${DATA_VOLUME_BASE_PATH}/media_services/sonarr/config:/config
      - ${DATA_VOLUME_BASE_PATH}/media_services/MEDIA:/MEDIA
    expose:
      - 8989
    labels:
      - traefik.enable=true
      - traefik.http.routers.sonarr.rule=Host(`${SONARR_HOST}`)
      - traefik.http.routers.sonarr.entrypoints=websecure
      - traefik.http.routers.sonarr.tls.certresolver=myresolver
    dns:
      - 1.1.1.1
      - 8.8.8.8
      - 8.8.4.4

  # to look for movies
  radarr:
    image: linuxserver/radarr:latest
    container_name: radarr
    restart: unless-stopped
    environment:
      - TZ=Europe/London
      - PUID=0
      - PGID=0
    depends_on:
      - jackett
      - transmission
    volumes:
      - ${DATA_VOLUME_BASE_PATH}/media_services/radarr/config:/config
      - ${DATA_VOLUME_BASE_PATH}/media_services/MEDIA:/MEDIA
    expose:
      - 7878
    labels:
      - traefik.enable=true
      - traefik.http.routers.radarr.rule=Host(`${RADARR_HOST}`)
      - traefik.http.routers.radarr.entrypoints=websecure
      - traefik.http.routers.radarr.tls.certresolver=myresolver
    dns:
      - 1.1.1.1
      - 8.8.8.8
      - 8.8.4.4

  # subtitle download with integration with radarr and sonarr
  bazarr:
    image: linuxserver/bazarr:latest
    container_name: bazarr
    restart: unless-stopped
    environment:
      - TZ=Europe/London
      - PUID=0
      - PGID=0
    depends_on:
      - radarr
      - sonarr
    volumes:
      - ${DATA_VOLUME_BASE_PATH}/media_services/bazarr/config:/config
      - ${DATA_VOLUME_BASE_PATH}/media_services/MEDIA:/MEDIA
    expose:
      - 6767
    labels:
      - traefik.enable=true
      - traefik.http.routers.bazarr.rule=Host(`${BAZARR_HOST}`)
      - traefik.http.routers.bazarr.entrypoints=websecure
      - traefik.http.routers.bazarr.tls.certresolver=myresolver
    dns:
      - 1.1.1.1
      - 8.8.8.8
      - 8.8.4.4

  # updates your no ip DNS. Useful when you want to use a CNAME for your actual DNS server records... E.g. sub.domain.com -> CNAME -> my.dynamic.noip.com
  ddns-updater:
    image: qmcgaw/ddns-updater
    container_name: ddns-updater
    restart: unless-stopped
    volumes:
      - ${DATA_VOLUME_BASE_PATH}/noip/config:/updater/data # must supply a valid configuration file inside this folder, otherwise refer to the image on how to build one first.
    dns:
      - 1.1.1.1
      - 8.8.8.8
      - 8.8.4.4

  homeassistant:
    container_name: homeassistant
    image: homeassistant/home-assistant:latest
    restart: unless-stopped
    network_mode: host
    environment:
      - TZ=Europe/Lisbon
    volumes:
      - ${DATA_VOLUME_BASE_PATH}/homeassistant/config:/config
    labels:
      - traefik.enable=true
      - traefik.http.routers.homeassistant.rule=Host(`${HOMEASSISTANT_HOST}`)
      - traefik.http.routers.homeassistant.entrypoints=websecure
      - traefik.http.routers.homeassistant.tls.certresolver=myresolver
      - traefik.http.services.homeassistant.loadbalancer.server.port=8123 # don't know why this is necessary. other work simply using the "expose" key
    depends_on:
      - postgres
    dns:
      - 1.1.1.1
      - 8.8.8.8
      - 8.8.4.4
    logging:
      driver: "none"

  # a youtubedl frontend
  alltube:
    container_name: alltube
    image: rudloff/alltube:develop
    restart: unless-stopped
    expose:
      - 80
    labels:
      - traefik.enable=true
      - traefik.http.routers.alltube.rule=Host(`${ALLTUBE_HOST}`)
      - traefik.http.routers.alltube.entrypoints=websecure
      - traefik.http.routers.alltube.tls.certresolver=myresolver
      - traefik.http.routers.alltube.middlewares=alltube-auth
      - traefik.http.middlewares.alltube-auth.basicauth.usersfile=/basic-auth/alltube_basic_auth_users
    dns:
      - 1.1.1.1
      - 8.8.8.8
      - 8.8.4.4

  # password manager https://bitwarden.com/
  # this image in not the official one: https://github.com/dani-garcia/bitwarden_rs
  bitwarden:
    container_name: bitwarden
    image: bitwardenrs/server
    restart: unless-stopped
    expose:
      - 80
    volumes:
      - ${DATA_VOLUME_BASE_PATH}/bitwarden/data:/data
    environment:
      ADMIN_TOKEN: '${BITWARDEN_ADMIN_TOKEN}'
      DATABASE_URL: '${BITWARDEN_DATABASE}'
      WEBSOCKET_ENABLED: 'true'  # Required to use websockets
      SIGNUPS_ALLOWED: 'false'   # set to false to disable signups
    labels:
      - traefik.enable=true
      - traefik.http.routers.bitwarden.rule=Host(`${BITWARDEN_HOST}`)
      - traefik.http.routers.bitwarden.entrypoints=websecure
      - traefik.http.routers.bitwarden.tls.certresolver=myresolver
    dns:
      - 1.1.1.1
      - 8.8.8.8
      - 8.8.4.4
    extra_hosts:
      - "host.docker.internal:host-gateway" # https://github.com/docker/for-linux/issues/264

  # https://github.com/traefik/traefik
  # reverse proxy for our services. reads the labels, and adapts the configuration to correctly forward requests
  # according to the host names.
  traefik:
    image: traefik:v2.4
    container_name: traefik
    restart: unless-stopped
    command:
      #- --log.level=DEBUG
      - --api.insecure=true
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.websecure.address=:443
      - --certificatesresolvers.myresolver.acme.tlschallenge=true
      #- --certificatesresolvers.myresolver.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory
      - --certificatesresolvers.myresolver.acme.email=${ACME_EMAIL}
      - --certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json
    extra_hosts:
      - host.docker.internal:172.17.0.1 # Required to be able to route into "host" network mode containers
    ports:
      - 4443:443
      - 8080:8080
    volumes:
      - ${DATA_VOLUME_BASE_PATH}/traefik/letsencrypt:/letsencrypt
      - ${DATA_VOLUME_BASE_PATH}/traefik/basic-auth:/basic-auth
      - /var/run/docker.sock:/var/run/docker.sock:ro

  # like pihole...
  adguardhome:
    image: adguard/adguardhome
    container_name: adguardhome
    restart: unless-stopped
    mac_address: de:92:b8:c6:fe:84
    cap_add:
      - NET_ADMIN
    networks:
      adguardhome_network:
        ipv4_address: 192.168.0.253
    ports:
      - 4444:443/tcp
      - 853:853/tcp
      - 53:53/tcp
      - 53:53/udp
      - 67:67/udp
      - 68:68/udp
      - 80:80/tcp
      - 3000:3000/tcp
    volumes:
      - ${DATA_VOLUME_BASE_PATH}/adguardhome/work:/opt/adguardhome/work
      - ${DATA_VOLUME_BASE_PATH}/adguardhome/conf:/opt/adguardhome/conf

  # schedules an internet speed test with a custom recurrence and records the result so you can see the results
  # in a graph across time.
  speedtest:
    image: henrywhitaker3/speedtest-tracker
    container_name: speedtest
    ports:
      - 8765:80
    volumes:
      - ${DATA_VOLUME_BASE_PATH}/speedtest/config:/config
    environment:
      - TZ=Europe/Lisbon
      - OOKLA_EULA_GDPR=true
    restart: unless-stopped

networks:
  adguardhome_network:
    name: adguardhome_network
    driver: macvlan
    driver_opts:
      parent: bond0
    ipam:
      config:
        - subnet: 192.168.0.0/24
          gateway: 192.168.0.254
          ip_range: 192.168.0.253/32
